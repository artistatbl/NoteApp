@page "/home"

@inject NavigationManager NavigationManager

@inject NotesService NotesService
@inject IAlertService AlertService
@inject IPlatformService Platform

<PageTitle>Home</PageTitle>

@if (!Platform.IsBrowser)
{
    <div class="maui-navbar text-white">
        <div class="">
            <h5 class="m-0">Welcome @Username</h5>
        </div>
        <NavLink href="/save" class="btn btn-default text-white m-0 fs-1">+</NavLink>
    </div>
}

<NavLink href="/save" class="text-decoration-none fab d-flex justify-content-center align-items-center">
    <span>+</span>
    @if (Platform.IsBrowser)
    {
        <small class="fs-6 fw-normal ms-2">Add a Note</small>
    }
</NavLink>

<div class="page">
    <div class="container-fluid">
        <div class="col-11 mx-auto">
            <div class="mt-3 d-flex justify-content-between align-items-end">
                <h2 class="@(Platform.IsBrowser ? "text-white" : "")">All Notes</h2>
                <div class="filter-btns">
                    @if (!Platform.IsBrowser)
                    {
                        <button type="button" class="btn btn-default" @onclick="@(() => ToggleLayout("col-6"))">
                            <i class="bx bx-sm bx-grid-alt" style="@(mainColClass == "col-6" ? "color: var(--color-main)" : "color: gray")"></i>
                        </button>
                        <button type="button" class="btn btn-default" @onclick="@(() => ToggleLayout("col-12"))">
                            <i class="bx bx-sm bx-menu" style="@(mainColClass == "col-12" ? "color: var(--color-main)" : "color: gray")"></i>
                        </button>
                    }
                    else
                    {
                        <h5 class="m-0 text-white">Welcome @Username</h5>
                    }
                </div>
            </div>
        </div>
        <hr class="text-white mb-0" />
    </div>

    @if (_isBusy)
    {
        <Loading LoadingText="@_busyText" />
    }
    else
    {
        if (!_notes.Any())
        {
            <div class="empty-notes-box-wrapper">
                <NavLink href="/save" class="text-center box add-note-btn text-decoration-none d-flex justify-content-center align-items-center flex-column">
                    <span class="icon">+</span>
                    <label class="label">Add a Note</label>
                </NavLink>
            </div>
        }
        else
        {
            <div class="@(Platform.IsBrowser ? "container" :"container-fluid")">
                <div class="row">
                    @foreach (var note in _notes)
                    {
                        var editLink = $"/save/{note.Id}";
                        <div class="@mainColClass col-sm-6 col-md-4 col-gap-y">
                            <div class="box">
                                <div>
                                    <h6 class="m-0 text-truncate" @onclick="()=> ViewNote(note)">@note.Title</h6>
                                    <hr />
                                </div>
                                <div class="flex-grow-1" style="overflow-y: auto">
                                    <div class="note-description-wrapper">
                                        @if (!string.IsNullOrWhiteSpace(note.Description))
                                        {
                                            var description = note.Description.Length > 100 ? $"{note.Description[0..100]}.." : note.Description;
                                            if(!Platform.IsBrowser && mainColClass == "col-12")
                                            {
                                                description = note.Description;
                                            }
                                            <p style="font-size: 14px;" @onclick="()=> ViewNote(note)">@description</p>
                                        }
                                        else
                                        {
                                            <NavLink href="@editLink" class="text-center text-decoration-none d-flex add-note-btn justify-content-center align-items-center flex-column">
                                                <span class="icon fs-4">+</span>
                                                <label class="label fs-6">Add description</label>
                                            </NavLink>
                                        }
                                    </div>
                                </div>
                                <div class="actions">
                                    <hr />
                                    <div class="d-flex justify-content-between align-items-center">
                                        <small style="font-size: 12px;">
                                            <i class="bx bx-time-five"></i>
                                            <small>@(note.ModifiedOn.HasValue ? note.ModifiedOn.Value.ToString(AppConstants.DateTimeFormat) : note.CreatedOn.ToString(AppConstants.DateTimeFormat))</small>
                                        </small>
                                        <div>
                                            @if (Platform.IsBrowser)
                                            {
                                                <button type="button" class="btn btn-sm btn-danger" @onclick="() => DeleteNoteAsync(note.Id)">
                                                    <i class="bx bx-trash"></i>
                                                </button>
                                                <NavLink href="@editLink" class="btn btn-primary btn-sm">
                                                    <i class="bx bx-edit"></i>
                                                </NavLink>
                                            }
                                            else
                                            {
                                                <button type="button" class="btn btn-xs" @onclick="() => ShowNoteActions(note.Id)">
                                                    <i class="bx bx-xs bx-dots-vertical-rounded"></i>
                                                </button>
                                            }
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    }
                    <div class="@mainColClass col-sm-6 col-md-4 col-gap-y">
                        <NavLink href="/save" class="text-center box add-note-btn text-decoration-none d-flex justify-content-center align-items-center flex-column">
                            <span class="icon">+</span>
                            <label class="label">Add a Note</label>
                        </NavLink>
                    </div>
                </div>
            </div>
        }
    }
</div>

@if(_viewingNote is not null)
{
    <ViewNoteDetails Note="_viewingNote" OnClose="() => ViewNote(null)" />
}

@code {
    [CascadingParameter(Name = AppConstants.StorageKeys.Username)]
    public string Username { get; set; } = string.Empty;

    private bool _isBusy = true;
    private string _busyText = "Fetching notes...";
    private IEnumerable<Note> _notes = Enumerable.Empty<Note>();

    private string mainColClass = "col-6";

    private Note? _viewingNote = null;

    protected override async Task OnInitializedAsync() => await LoadNotesAsync();

    private async Task LoadNotesAsync()
    {
        try
        {
            //await Task.Delay(5000);
            _notes = await NotesService.GetAllNotesAsync();

        }
        catch (Exception ex)
        {
            await AlertService.AlertAsync($"Error in fetching notes. \n {ex.Message}", "Error");
            //throw;
        }
        finally
        {
            _isBusy = false;
        }
    }

    private void ToggleLayout(string btnClass)
    {
        if (mainColClass != btnClass)
            mainColClass = btnClass;
    }

    private async Task ShowNoteActions(Guid id)
    {
        if (!Platform.IsBrowser)
        {
            const string DeleteNote = "Delete";
            const string EditNote = "Edit";

            var action = await Platform.ChooseFromOptions("Note Actions", DeleteNote, EditNote);

            if(action is not null)
            {
                switch (action)
                {
                    case DeleteNote:
                        await DeleteNoteAsync(id);
                        break;
                    case EditNote:
                        NavigationManager.NavigateTo($"/save/{id}");
                        return;
                }
            }
        }
    }
    private async Task DeleteNoteAsync(Guid noteId)
    {
        if(await AlertService.ConfirmAsync("Do you really want to delete this note?", "Confirm Delete?", "Yes", "No"))
        {
            _isBusy = true;
            _busyText = "Deleting note...";
            try
            {
                await NotesService.DeleteNoteAsync(noteId);
                _busyText = "Fetching notes...";
                StateHasChanged();
                await LoadNotesAsync();
            }
            catch (Exception ex)
            {
                await AlertService.AlertAsync($"Error in deleting note. \n {ex.Message}", "Error");
            }
            finally
            {
                _isBusy = false;
                _busyText = ""; ;
            }
        }
    }

    private void ViewNote(Note? note) => _viewingNote = note;
}
